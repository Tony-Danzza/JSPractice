{"version":3,"sources":["utlils.js","sound.js"],"names":["hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","Math","round","WIDTH","HEIGHT","FPS","canvas","document","querySelector","ctx","getContext","width","height","analyzer","bufferLength","handleError","err","console","log","getAudio","navigator","mediaDevices","getUserMedia","audio","stream","audioCtx","AudioContext","createAnalyser","source","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequency","getByteTimeDomainData","clearRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","requestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect"],"mappings":";;ACAA;AAAmC;AAAA,+CACnC;AAAA;AAAA,ADDO,SAASA,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;ACClC,EDAI,IAAIC,CAAC;ACAT,EDCI,IAAIC,CAAC;ACDT,EDEI,IAAIC,CAAC;ACFT,EDII,IAAIJ,CAAC,IAAI,CAAC,EAAE;ACJhB,IDKME,CAAC,GAAGC,CAAC,GAAGC,CAAC,GAAGH,CAAC,CAAC,CAAC;ACLrB,EDMI,CAAC,MAAM;ACLX,IDMM,IAAMI,OAAO,GAAG,SAASA,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;ACLhD,IAAMG,EDME,GCNG,CDMCH,CAAC,CCNC,EDME,CAAC,CCNC,CDMCA,CAAC,IAAI,CAAC;ACLzB,IAAMI,EDME,ICNI,ADMAJ,CAAC,ECNE,CDMC,CAAC,CCNC,CDMCA,CAAC,IAAI,CAAC;ACLzB,IAAMK,EDME,CCNC,GAAG,ADMAL,CAAC,CCNC,EDME,CAAC,GAAG,CAAC,EAAE,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAC,IAAI,CAAC,GAAGE,CAAC;ACLjD,MDMQ,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAOD,CAAC;ACL/B,IAAMO,EDME,ICNI,ADMAN,CAAC,ECNEO,CDMC,CAAC,GAAG,CAAC,ECNE,ADMA,CCNCC,MDMMV,CAAC,GAAG,CAACC,CAAC,CCNC,CAAC,CDMCD,CAAC,KAAK,CCNC,ADMA,CCNC,EDME,CAAC,GAAGE,CAAC,CAAC,GAAG,CAAC;ACJ3D,IAAMS,EDKE,CCLC,GAAGH,GDKGR,CAAC,ECLE,CAACY,UAAU,CAAC,IAAI,CAAC;AAEnCJ,IDIM,CAAC,CCJD,CAACK,KAAK,GAAGR,KAAK;AACpBG,IDKM,ECLA,CAACM,CDKKb,CAAC,GAAGN,CCLH,ADKI,GCLDW,ADKI,GAAG,GCLD,ADKIX,CAAC,IAAI,CAAC,GAAGD,CAAC,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAGD,CAAC;IAC/C,IAAMM,CAAC,GAAG,CAAC,GAAGL,CAAC,GAAGM,CAAC;ACJzB,IDKML,CAAC,GAAGG,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAER,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5BI,CAAC,GAAGE,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAER,CAAC,CAAC;ACJ1B,IAAIsB,ADKEjB,CAAC,GAAGC,ICLE,GDKK,CAACC,CAAC,EAAEC,CAAC,EAAER,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;ACHlC,EDII,ECJAuB,YAAY;AAEhB,EDII,OCJKC,ADIE,CAACd,IAAI,CAACC,KCJG,ADIE,CCJDc,ADIEtB,CAAC,ECJA,CDIG,CCJD,EDII,CAAC,EAAEO,IAAI,CAACC,KAAK,CAACP,CAAC,GAAG,GAAG,CAAC,EAAEM,IAAI,CAACC,KAAK,CAACN,CAAC,GAAG,GAAG,CAAC,CAAC;AACxE,ECJDqB,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AACjB;AAAC,SAEcG,QAAQ;EAAA;AAAA;AAAA;EAAA,uEAAvB;IAAA;IAAA;MAAA;QAAA;UAAA;UAAA,OACsBC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;YAAEC,KAAK,EAAE;UAAK,CAAC,CAAC;QAAA;UAAnEC,MAAM;UACNC,QAAQ,GAAG,IAAIC,YAAY,EAAE;UACnCb,QAAQ,GAAGY,QAAQ,CAACE,cAAc,EAAE;UAC9BC,MAAM,GAAGH,QAAQ,CAACI,uBAAuB,CAACL,MAAM,CAAC;UACvDI,MAAM,CAACE,OAAO,CAACjB,QAAQ,CAAC;UACxB;UACAA,QAAQ,CAACkB,OAAO,YAAG,CAAC,EAAI,EAAE;UAC1B;UACAjB,YAAY,GAAGD,QAAQ,CAACmB,iBAAiB;UACnCC,QAAQ,GAAG,IAAIC,UAAU,CAACrB,QAAQ,CAACmB,iBAAiB,CAAC,EAAC;UACtDG,aAAa,GAAG,IAAID,UAAU,CAACrB,QAAQ,CAACmB,iBAAiB,CAAC;UAE7DI,YAAY,CAACH,QAAQ,CAAC;UACtBI,aAAa,CAACF,aAAa,CAAC;UAC/B;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACA;EAAA;AAAA;AAED,SAASC,YAAY,CAACH,QAAQ,EAAE;EAC/BpB,QAAQ,CAACyB,qBAAqB,CAACL,QAAQ,CAAC,EAAC;EACzC;;EAEAxB,GAAG,CAAC8B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEpC,KAAK,EAAEC,MAAM,CAAC,EAAC;EACnCK,GAAG,CAAC+B,SAAS,GAAG,CAAC;EACjB/B,GAAG,CAACgC,WAAW,GAAG,kBAAkB;EACpChC,GAAG,CAACiC,SAAS,EAAE;EAEf,IAAMC,UAAU,GAAGxC,KAAK,GAAGW,YAAY;EAEvC,IAAI8B,CAAC,GAAG,CAAC;EAETX,QAAQ,CAACY,OAAO,CAAC,UAACC,IAAI,EAAEC,CAAC,EAAK;IAC7B,IAAMC,CAAC,GAAGF,IAAI,GAAG,GAAG;IACpB,IAAMG,CAAC,GAAID,CAAC,GAAG5C,MAAM,GAAI,CAAC;IAC1B,IAAI2C,CAAC,KAAK,CAAC,EAAE;MACZtC,GAAG,CAACyC,MAAM,CAACN,CAAC,EAAEK,CAAC,CAAC;IACjB,CAAC,MAAM;MACNxC,GAAG,CAAC0C,MAAM,CAACP,CAAC,EAAEK,CAAC,CAAC;IACjB;IACAL,CAAC,IAAID,UAAU;EAChB,CAAC,CAAC;EACFlC,GAAG,CAAC2C,MAAM,EAAE;EACZC,qBAAqB,CAAC;IAAA,OAAMjB,YAAY,CAACH,QAAQ,CAAC;EAAA,EAAC;AACpD;AAKA,SAASI,aAAa,CAACF,aAAa,EAAE;EAClCtB,QAAQ,CAACyC,oBAAoB,CAACnB,aAAa,CAAC;EAE5C,IAAMoB,QAAQ,GAAIpD,KAAK,GAAGW,YAAY,GAAI,CAAC;EAE3C,IAAI8B,CAAC,GAAG,CAAC;EAETT,aAAa,CAACU,OAAO,CAAC,UAACW,MAAM,EAAK;IAC9B,IAAMC,OAAO,GAAGD,MAAM,GAAG,GAAG;IAC5B,IAAOjE,CAAC,GAAY,GAAG,IAAIkE,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG;MAArCjE,CAAC,GAAsC,IAAI;MAAxCC,CAAC,GAAyC,GAAG;IAC1D,IAAMiE,SAAS,GAAItD,MAAM,GAAGqD,OAAO,GAAI,CAAC;IACxC;;IAEA;;IAEA,gBAAgB,IAAAnE,gBAAQ,EAACC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC;MAAA;MAAxBC,CAAC;MAACC,CAAC;MAACC,CAAC;IACZa,GAAG,CAACkD,SAAS,kBAAWjE,CAAC,eAAKC,CAAC,eAAKC,CAAC,WAAQ;IAG7Ca,GAAG,CAACmD,QAAQ,CACRhB,CAAC,EACDxC,MAAM,GAAGsD,SAAS,EAClBH,QAAQ,EACRG,SAAS,EACTd,CAAC,IAAIW,QAAQ,GAAG,CAAC,CACpB;EAGL,CAAC,CAAC;;EAEF;EACA;EACA;EACA;;EAEAF,qBAAqB,CAAC,YAAK;IAAChB,aAAa,CAACF,aAAa,CAAC;EAAA,CAAC,CAAC;AAE9D;AACAhB,QAAQ,EAAE","file":"sound.66e01127.js","sourceRoot":"..","sourcesContent":["export function hslToRgb(h, s, l) {\r\n    let r;\r\n    let g;\r\n    let b;\r\n  \r\n    if (s == 0) {\r\n      r = g = b = l; // achromatic\r\n    } else {\r\n      const hue2rgb = function hue2rgb(p, q, t) {\r\n        if (t < 0) t += 1;\r\n        if (t > 1) t -= 1;\r\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n        if (t < 1 / 2) return q;\r\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n        return p;\r\n      };\r\n  \r\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n      const p = 2 * l - q;\r\n      r = hue2rgb(p, q, h + 1 / 3);\r\n      g = hue2rgb(p, q, h);\r\n      b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n  \r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n  }\r\n  ","import { hslToRgb } from \"./utlils\"\r\n\r\n// const [WIDTH, HEIGHT] = [1500, 1500]\r\nconst WIDTH = 1500\r\nconst HEIGHT = 800\r\nconst FPS = 30\r\n// console.log(height, width);\r\nconst canvas = document.querySelector('canvas')\r\n\r\nconst ctx = canvas.getContext('2d')\r\n\r\ncanvas.width = WIDTH\r\ncanvas.height = HEIGHT\r\n\r\n// console.log(canvas.height)\r\n\r\nlet analyzer\r\n\r\nlet bufferLength\r\n\r\nfunction handleError(err) {\r\n\tconsole.log(err)\r\n}\r\n\r\nasync function getAudio() {\r\n\tconst stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n\tconst audioCtx = new AudioContext()\r\n\tanalyzer = audioCtx.createAnalyser()\r\n\tconst source = audioCtx.createMediaStreamSource(stream)\r\n\tsource.connect(analyzer)\r\n\t// NOTE: Set the amount of data to collect\r\n\tanalyzer.fftSize = 2 ** 12\r\n\t// NOTE: pull data off audio\r\n\tbufferLength = analyzer.frequencyBinCount\r\n\tconst timeData = new Uint8Array(analyzer.frequencyBinCount) //NOTE: 'UintxArray' for large amount data.\r\n\tconst frequencyData = new Uint8Array(analyzer.frequencyBinCount)\r\n\r\n    drawTimeData(timeData)\r\n    drawFrequency(frequencyData)\r\n\t// console.log(frequencyData)\r\n}\r\n\r\nfunction drawTimeData(timeData) {\r\n\tanalyzer.getByteTimeDomainData(timeData) //NOTE: this is where were insert timeData data into timeData\r\n\t// console.log(timeData)\r\n\r\n\tctx.clearRect(0, 0, WIDTH, HEIGHT) //NOTE: clear canvas before each operation\r\n\tctx.lineWidth = 8\r\n\tctx.strokeStyle = 'rgba(75,0,255,1)'\r\n\tctx.beginPath()\r\n\r\n\tconst sliceWidth = WIDTH / bufferLength\r\n\r\n\tlet x = 0\r\n\r\n\ttimeData.forEach((data, i) => {\r\n\t\tconst v = data / 128\r\n\t\tconst y = (v * HEIGHT) / 2\r\n\t\tif (i === 0) {\r\n\t\t\tctx.moveTo(x, y)\r\n\t\t} else {\r\n\t\t\tctx.lineTo(x, y)\r\n\t\t}\r\n\t\tx += sliceWidth\r\n\t})\r\n\tctx.stroke()\r\n\trequestAnimationFrame(() => drawTimeData(timeData))\r\n}\r\n\r\n\r\n\r\n\r\nfunction drawFrequency(frequencyData) {\r\n    analyzer.getByteFrequencyData(frequencyData)\r\n\r\n    const barWidth = (WIDTH / bufferLength) * 5\r\n\r\n    let x = 0\r\n\r\n    frequencyData.forEach((amount) => {\r\n        const percent = amount / 255\r\n        const [h, s, l] = [(360 / (percent * 360))- 0.7, 0.85, 0.5]\r\n        const barHeight = (HEIGHT * percent) / 2\r\n        // console.log(h,s,l)\r\n\r\n        // ctx.fillStyle = `rgba(0,145,225,0.6)`\r\n\r\n        const [r,g,b] = hslToRgb(h,s,l)\r\n        ctx.fillStyle = `rgba(${r}, ${g}, ${b}, 0.9)`\r\n        \r\n\r\n        ctx.fillRect(\r\n            x,\r\n            HEIGHT - barHeight,\r\n            barWidth,\r\n            barHeight,\r\n            x += barWidth + 5\r\n        )\r\n\r\n\r\n    })\r\n\r\n    // console.log(frequencyData);\r\n    // setTimeout(() => {\r\n    //     requestAnimationFrame(drawFrequency(frequencyData))\r\n    // }, 500)\r\n\r\n    requestAnimationFrame(()=> {drawFrequency(frequencyData)})\r\n    \r\n}\r\ngetAudio()\r\n"]}